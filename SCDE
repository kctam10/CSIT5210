# sources: Keras and sklearn API 

from keras.datasets import mnist
from keras.layers import Input, Dense
from keras.models import Model
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow.keras.backend as K


(X_train, _), (X_test, _) = mnist.load_data()
X_train = X_train.astype('float32')/255
X_test = X_test.astype('float32')/255
X_train = X_train.reshape(len(X_train), np.prod(X_train.shape[1:]))
X_test = X_test.reshape(len(X_test), np.prod(X_test.shape[1:]))


input_img= Input(shape=(784,))

encoded = Dense(units=500, activation='relu')(input_img)
encoded = Dense(units=500, activation='relu')(encoded)
encoded = Dense(units=2000, activation='relu')(encoded)
encoded = Dense(units=10, activation='relu')(encoded)
decoded = Dense(units=2000, activation='relu')(encoded)
decoded = Dense(units=500, activation='relu')(decoded)
decoded = Dense(units=500, activation='relu')(decoded)
decoded = Dense(units=784, activation='sigmoid')(decoded)

autoencoder=Model(input_img, decoded)
encoder = Model(input_img, encoded)

def sse(y_true, y_pred):
    return K.sum(K.square(y_pred-y_true),axis=-1)

autoencoder.compile(optimizer='SGD', loss=sse, metrics=['accuracy'])

autoencoder.fit(X_train, X_train, epochs=100, batch_size=128, 
                shuffle=True, validation_data=(X_test, X_test))

encoded_imgs = encoder.predict(X_test)
predicted = autoencoder.predict(X_test)

plt.figure(figsize=(40, 4))
for i in range(10):
    # display original images
    ax = plt.subplot(3, 20, i + 1)
    plt.imshow(X_test[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
    
    # display encoded images
    ax = plt.subplot(3, 20, i + 1 + 20)
    plt.imshow(encoded_imgs[i].reshape(5,2))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
    
    # display reconstructed images
    ax = plt.subplot(3, 20, 2*20 +i+ 1)
    plt.imshow(predicted[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
  
    
plt.show()


from sklearn.cluster import KMeans, SpectralClustering, DBSCAN, Birch
from sklearn.metrics.cluster import normalized_mutual_info_score
from keras.datasets import mnist


(x_train, y_train), (x_test, y_test) = mnist.load_data()
X = x_train.reshape(len(x_train),-1)
#X = x_train
Y = y_train
X = X.astype(float) / 255.


L = autoencoder.predict(X[:])
#L = encoder.predict(X[:])

#L = L.reshape(len(L),-1)

L=L[:30000]

km = KMeans(n_clusters=10).fit(L)
print(normalized_mutual_info_score(Y[:30000], km.labels_))
#sc = SpectralClustering(n_clusters=10).fit(L)
#print(normalized_mutual_info_score(Y[:700], sc.labels_))
br=Birch(n_clusters=10).fit(L)
print(normalized_mutual_info_score(Y[:30000], br.labels_))

#print(sc.labels_)
#0.5061505933619439
#0.07141114032295817
